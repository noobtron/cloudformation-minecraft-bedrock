AWSTemplateFormatVersion: 2010-09-09
Parameters:
  InstanceTypeParameter:
    Type: String
    Default: t3.micro
    Description: Choose instance type- Default is t3.micro (free tier in eu-north-1 (Stockholm))
  WorkstationIp:
    Type: String
    Description: The IP address of the workstation that can SSH into the instance e.g. check from https://www.ripe.net/
  Key:
    Type: String
    Description: The key used to access the instance.
Mappings:
  RegionSelection:
    eu-west-1:
      AMI: ami-05cd35b907b4ffe77
    eu-central-11:
      AMI: ami-058e6df85cfc7760b
    eu-west-2:
      AMI: ami-02f5781cba46a5e8a
    eu-west-3:
      AMI: ami-0eb34a1ff6bafc83f
    eu-north-1:
      AMI: ami-0d15082500b576303
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Minecraft VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH from workstation and UDP 19132 for Minecraft from internet, all traffic out."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: '19132'
          ToPort: '19132'
          CidrIp:  0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:  !Sub ${WorkstationIp}/32
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Linux
  Linux:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref SubnetA
      ImageId: !FindInMap [RegionSelection, !Ref 'AWS::Region', AMI]
      InstanceType:
        Ref: InstanceTypeParameter
      KeyName: !Ref Key
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          sudo yum update -y
          sudo amazon-linux-extras install docker
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          docker volume create mc-volume
          docker run -d -it --name mc --restart unless-stopped -e EULA=TRUE -e SERVER_NAME=Mastercraft -p 19132:19132/udp -v mc-volume:/data itzg/minecraft-bedrock-server
      Tags:
        -
          Key: Application
          Value: Minecraft Bedrock Linux Server
        -
          Key: Name
          Value: Minecraft Bedrock Linux Server
        -
          Key: OS
          Value: Amazon Linux 2 AMI
Outputs:
  PublicIp:
    Value:
      Fn::GetAtt:
        - Linux
        - PublicIp
    Description: Minecraft Bedrock Server's public ip address